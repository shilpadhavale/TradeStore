name: Java CI/CD Pipeline with PlantUML

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'  # Use Temurin JDK distribution

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Run tests and build
        run: mvn clean install -DskipTests=false

      # Step 1: Install PlantUML
      - name: Install PlantUML
        run: sudo apt-get install -y plantuml

      # Step 2: Generate PlantUML Diagrams (from .puml files)
      - name: Generate PlantUML diagrams
        run: |
          plantuml src/main/resources/diagrams/*.puml

      # Step 3: Upload generated diagrams as build artifacts (for access after the build)
      - name: Upload PlantUML Diagrams as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: plantuml-diagrams
          path: src/main/resources/diagrams/*.png

      # Step 4: Run OWASP Dependency Check
      - name: Run OWASP Dependency-Check
        uses: addnab/docker-run-action@v3
        with:
          image: owasp/dependency-check
          options: --rm  # Cleanup after running
          args: "--project 'Your Project Name' --scan /github/workspace --out reports/ --format ALL"
        continue-on-error: false

      # Step 5: Run Snyk Security Vulnerability Scan (Optional)
      - name: Run Snyk Security Vulnerability Scan
        uses: snyk/actions/maven@master
        with:
          snyk-token: ${{ secrets.SNYK_TOKEN }}  # Store Snyk Token in Secrets
        continue-on-error: false

      # Step 6: Build and deploy the application
      - name: Build and Deploy (if all tests pass and no vulnerabilities detected)
        run: mvn deploy
        if: success()

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'  # Use Temurin JDK distribution

      - name: Deploy Application
        run: |
          ssh user@yourserver.com "cd /path/to/project && git pull && mvn deploy"
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

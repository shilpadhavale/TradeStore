name: Java CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'zulu'

      # Step 3: Cache Maven dependencies (optional but speeds up builds)
      - name: Cache Maven dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Run Maven build and tests (Regression Testing)
      - name: Run tests and build
        run: mvn clean install -DskipTests=false

      # Step 5: Run Open Source Software (OSS) Vulnerability Scan with OWASP Dependency-Check
      - name: Run OWASP Dependency-Check
        uses: jeremydmiller/dependency-check-action@v1
        with:
          project: "Your Project Name"
          token: ${{ secrets.OWASP_DEPENDENCY_CHECK_API_KEY }}  # Optional: if you have an API key
        continue-on-error: false

      # Step 6: (Optional) Run Snyk for security vulnerability scanning (You can choose either or both OSS tools)
      - name: Run Snyk Security Vulnerability Scan
        uses: snyk/actions/maven@master
        with:
          snyk-token: ${{ secrets.SNYK_TOKEN }}  # Store Snyk Token in Secrets
        continue-on-error: false

      # Step 7: Build and deploy the application (deployment can be skipped in pull requests)
      - name: Build and Deploy (if all tests pass and no vulnerabilities detected)
        run: mvn deploy
        if: success()

  # Deployment Job (Only runs if the build job is successful)
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'

      # Step 3: Deploy your application (customize to your deployment strategy)
      - name: Deploy Application
        run: |
          ssh user@yourserver.com "cd /path/to/project && git pull && mvn deploy"
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
